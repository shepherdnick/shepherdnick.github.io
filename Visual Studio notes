I can't quite understand why uprise doesn't use Visual Studio - I've been using Visual Studio Code with you guys for the last few weeks and I don't know if I'm not using it correctly but there are several features that it's missing compared to the more fully featured Visual Studio - some of which I think would make development and deployment faster and less error prone.

Some of the features I have been missing whilst using VS Code:

- Highly structured file system - the Source Explorer gives you an overall view of the files in one place, meaning finding files is easier - for example ascx (Web Forms User Controls) appear as one collapsed file in the file tree, which when expanded show then the different designer file and code behind file.  E.g. Double clicking on the file opens the designer view, right click and "View Code" to view the code behind.  Double clicking on a button will automatically generate the code snippet code-behind function for you to begin writing in.

- Intellisense - whilst you get a general version of it in VS Code, it's actually integrated into your codebase in VS.  For example, it will auto-complete function names and properties that actually exist for you to call or access, rather than just guessing (which is what VS Code does).  The other really useful thing about intellisense is the ability to find all occurrences - say you want to find out where all instances of an interfaces have been implemented - you can right click and "Find all occurrences", and you get a list of the places where that function will be called from.

- Building - You just have to click a button to build and everything is built at once.  In addition to that you get pre-build errors which work a bit like spell checking in a document where errors are highlighted before you even click build.

- Debugging - Debugging is a vital tool for any developer - I don't know how you guys have survived so long without being able to run some code and stop it whenever you need to to be able to debug a function.  It is basically invaluable.

- Deployment - We are using our development server as if it were our own machine, usually because the work we're doing is silo'd and won't clash with someone else, but the way we're thinking about this this is the wrong way around - it makes our deployment to QA and testing quicker, but that's deployment not development - the idea is that we write, build and debug code on our local machines, (because there's a built in development version of IIS on your development machine called IIS Express) and when we're ready, we deploy the code to the staging server - this server is where all testing is completed.

- IIS/Azure - You can deploy straight from Visual Studio straight to Azure - there'd be no need to write our own deployment software, or using FTP - we could connect directly to the Azure servers to deploy.

- Built in Version Control - several different types of version control are already built in to Visual Studio, but the easiest to get along with is actually Git.  I've recently been looking into this, because I feel this is something that a dev team really should be using to track bug fixes, version numbers and multi-developer projects (the more of which it looks like we'll be doing with RMS etc.)  Microsoft actually offer private repositories for free for up to 5 developers, and just $30 a month for teams over 10 people, which is remarkably cheaper than it's been in the past.
