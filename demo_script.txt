Story for the Demo

1) Create new branch from the master, called VSIDemo

2) Show the list of files that are just classes copied from the main source - mostly the core files of VSI

3) Create a new folder underneath Widgets called VSIDemo

4) In that folder add a new user control called VSIDemo

5) Begin in the designer file, and start typing the control <VSI:VSIRepeater
a) Don't forget runat="server" ID="rptVSIDemo" PrimaryKey="keyname"
b) See that the name VSIRepeater is unrecognized (show the pre-compiler picking this up)

6) You know (through experience) that the reason for this is that you haven't used the Register directive. e.g. <%@ Register assembly="VSI"

7) Once the VSIRepeater issue is resolved, add the HeaderTemplate, ItemTemplate and FooterTemplate.

8) Add a new Web Form called VSIDemoPage.aspx and set it as the startup page

9) Drag and drop your new control onto the page.

10) Just so we can see where the page is and where the control is, we'll just add some text

11) Do the first run of the web page - you see the page text but not the control text. Why's that? Because there's no data bound to the repeater.

12) So, let's create a simple data set and bind it to the repeater.

List<string> testStrings = new List<string>;
testStrings.Add("string1");...
 {"string1", "string2", "string3"};

rptVSIDemo ... notice that I haven't added a global variable to identify the repeater - it already knows about it.

13) Run it again - BAM! Hidden Exception! Put a breakpoint in at the first line of the Refresh function and we'll see if we can debug it.

14) Seems to be coming from the DataBind() function - let's debug again and step into it... there it is!

15) I don't know where abouts in the file the bool is so I can find out easy enough by right clicking on it, and going to definition

16) Change the value to false, and run it again

17) Finally we can see how it's supposed to look.  Now let's make it a bit nicer to look at.

18) Turn the List<string> into List<TestObject> and create three objects.

19) Change the designer file to display the <%# Eval("Name") %> and <%# Eval("Value") %>

20) Turn it into a table (all while not stopping the running solution, just refresh the page.)
